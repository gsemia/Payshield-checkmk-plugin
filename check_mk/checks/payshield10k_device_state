#!/usr/bin/python

# OIDs used:
#!/usr/bin/python

# OIDs used:
# THALES-ESECURITY-PAYSHIELD-MIB::payShieldStateDevice.0        .1.3.6.1.4.1.4096.2.2.10000.2.1.0
# THALES-ESECURITY-PAYSHIELD-MIB::payShieldStateTamperState.0   .1.3.6.1.4.1.4096.2.2.10000.3.2.1.0
# THALES-ESECURITY-PAYSHIELD-MIB::payShieldStateTamperDate.0    .1.3.6.1.4.1.4096.2.2.10000.3.2.2.0
# THALES-ESECURITY-PAYSHIELD-MIB::payShieldStateTamperCause.0   .1.3.6.1.4.1.4096.2.2.10000.3.2.3.0
# Scan function looks for Enterprise 'THALES-ESECURITY-PAYSHIELD-MIB' OID and if it exists we continue

# Author: Rolf Koch - rolf.koch@netcetera.com - http://netcetera.com

def inventory_payshield10k_device_state(info):
    for index, value in enumerate(info[0]):
        yield 'Payshield Device State', None
        yield 'Payshield Tamper State', None
        break


def check_payshield10k_device_state(item, _no_params, info):
    for checkname, value  in enumerate(info[0]):
        if 'Payshield Device State' in item:
            if value[0] == "0":
                return (1, "CRIT - %s - Secure (two Keys are turned)" % item )
            elif value[0] == "1":
                return (1, "CRIT - %s - Offline (One Key is turned)" % item )
            elif value[0] == "2":
                return (0, "OK - %s -  Online (USB Serial console offline - No Key is turned)" % item)
            elif value[0] == "4":
                return (0, "OK - %s -  Online (USB Serial Console connected - No Key is turned)" % item)

            return (3, "cannot determine Payshield Device State - UNKNOWN value: %s" % value[0])
        elif 'Payshield Tamper State' in item:
            if value[1] == "3":
                return (2, "CRIT - %s - Tamper detected: %s %s" % (item,value[2],value[3]) )
            elif value[1] == "1":
                return (2, "WARN - %s - Tamper state reported as unknown %s %s" % (item,value[2],value[3]) )
            elif value[1] == "2":
                return (0, "OK - %s - No Tamber detected %s %s" % (item,value[2],value[3]) )

            return (3, "cannot determine Payshield Tamper State - UNKNOWN value: %s" % value[1])

check_info["payshield10k_device_state"] = {
    "check_function"        : check_payshield10k_device_state,
    "inventory_function"    : inventory_payshield10k_device_state,
    "service_description"   : "%s",
    "has_perfdata"          : False,
    "snmp_scan_function"    : lambda oid:  oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.4096") and oid(".1.3.6.1.4.1.4096.2.2.10000.2.1.0") is not None ,
    "snmp_info"             : [( ".1.3.6.1.4.1.4096.2.2.10000", [
                                  "2.1.0",   #payShieldStateDevice.0
                                  "2.2.1.0", #payShieldStateTamperState.0
                                  "2.2.2.0", #payShieldStateTamperDate.0
                                  "2.2.3.0"  #payShieldStateTamperCause.0
                              ])],
}
