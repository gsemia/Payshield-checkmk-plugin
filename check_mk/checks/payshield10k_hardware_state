#!/usr/bin/python

# OIDs used:

# THALES-ESECURITY-PAYSHIELD-MIB::payShieldStateFanSerialNum.1			.1.3.6.1.4.1.4096.2.2.10000.2.3.1.1.2.1 = STRING: "xxxx"
# THALES-ESECURITY-PAYSHIELD-MIB::payShieldStateFanSerialNum.2			.1.3.6.1.4.1.4096.2.2.10000.2.3.1.1.2.2 = STRING: "xxxxx"
# THALES-ESECURITY-PAYSHIELD-MIB::payShieldStateFanState.1			.1.3.6.1.4.1.4096.2.2.10000.2.3.1.1.3.1 = INTEGER: 1
# THALES-ESECURITY-PAYSHIELD-MIB::payShieldStateFanState.2			.1.3.6.1.4.1.4096.2.2.10000.2.3.1.1.3.2 = INTEGER: 1
# THALES-ESECURITY-PAYSHIELD-MIB::payShieldStatePSUSerialNum.1			.1.3.6.1.4.1.4096.2.2.10000.2.4.1.1.2.1 = STRING: "yyyy"
# THALES-ESECURITY-PAYSHIELD-MIB::payShieldStatePSUSerialNum.2			.1.3.6.1.4.1.4096.2.2.10000.2.4.1.1.2.2 = STRING: "yyyy"
# THALES-ESECURITY-PAYSHIELD-MIB::payShieldStatePSUState.1			.1.3.6.1.4.1.4096.2.2.10000.2.4.1.1.3.1 = INTEGER: 1
# THALES-ESECURITY-PAYSHIELD-MIB::payShieldStatePSUState.2			.1.3.6.1.4.1.4096.2.2.10000.2.4.1.1.3.2 = INTEGER: 1
# THALES-ESECURITY-PAYSHIELD-MIB::payShieldStateBattery.0			.1.3.6.1.4.1.4096.2.2.10000.2.5.0 = INTEGER: 1

# Scan function looks for Enterprise 'THALES-ESECURITY-PAYSHIELD-MIB' OID and if it exists we continue

# Author: Rolf Koch - rolf.koch@netcetera.com - http://netcetera.com

def inventory_payshield10k_hardware_state(info):
    for index, value in enumerate(info[0]):
        yield 'Payshield HW Fan 1 State', None
        yield 'Payshield HW Fan 2 State', None
        yield 'Payshield HW PSU 1 State', None
        yield 'Payshield HW PSU 2 State', None
        yield 'Payshield HW Battery State', None
        break


def check_payshield10k_hardware_state(item, _no_params, info):
    for checkname, value  in enumerate(info[0]):
        fanSerialNum1, fanSerialNum2, fanState1, fanState2, psuSerialNum1, psuSerialNum2, psuState1, psuState2, batteryState = value
        if 'Payshield HW Fan 1 State' in item:
            if fanState1 == "1":
                return (0, "OK - Fan 1 with Serial %s is OK: State %s" % (fanSerialNum1,fanState1) )
            else:
                return (2, "CRIT - Fan 1 with Serial %s is Critical: State %s" % (fanSerialNum1,fanState1) )

            return (3, "cannot determine Payshield Fan 1 State - UNKNOWN value: %s" % fanState1)
        elif 'Payshield HW Fan 2 State' in item:
            if fanState2 == "1":
                return (0, "OK - Fan 2 with Serial %s is OK: State %s" % (fanSerialNum2,fanState2) )
            else:
                return (2, "CRIT - Fan 2 with Serial %s is Critical: State %s" % (fanSerialNum2,fanState2) )

            return (3, "cannot determine Payshield Fan 2 State - UNKNOWN value: %s" % fanState2)
        elif 'Payshield HW PSU 1 State' in item:
            if psuState1 == "1":
                return (0, "OK - PSU 1 with Serial %s is OK: State %s" % (psuSerialNum1,psuState1) )
            else:
                return (2, "CRIT - PSU 1 with Serial %s is Critical: State %s" % (psuSerialNum1,psuState1) )

            return (3, "cannot determine Payshield PSU 1 State - UNKNOWN value: %s" % psuState1)
        elif 'Payshield HW PSU 2 State' in item:
            if psuState2 == "1":
                return (0, "OK - PSU 2 with Serial %s is OK: State %s" % (psuSerialNum2,psuState2) )
            else:
                return (2, "CRIT - PSU 2 with Serial %s is Critical: State %s" % (item,psuSerialNum2,psuState2) )

            return (3, "cannot determine Payshield PSU 2 State - UNKNOWN value: %s" % psuState2)
        elif 'Payshield HW Battery State' in item:
            if batteryState == "1":
                return (0, "OK - %s Battery is OK: State %s" % (item,batteryState) )
            else:
                return (2, "CRIT - %s Battery Critical: State %s" % (item,batteryState) )

            return (3, "cannot determine Payshield Battery State - UNKNOWN value: %s" % batteryState)

check_info["payshield10k_hardware_state"] = {
    "check_function"        : check_payshield10k_hardware_state,
    "inventory_function"    : inventory_payshield10k_hardware_state,
    "service_description"   : "%s",
    "has_perfdata"          : False,
    "snmp_scan_function"    : lambda oid:  oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.4096") and oid(".1.3.6.1.4.1.4096.2.2.10000.2.1.0") is not None ,
    "snmp_info"             : [( ".1.3.6.1.4.1.4096.2.2.10000.2", [
                                  "3.1.1.2.1", #payShieldStateFanSerialNum.1
                                  "3.1.1.2.2", #payShieldStateFanSerialNum.2
                                  "3.1.1.3.1", #payShieldStateFanState.1
                                  "3.1.1.3.2", #payShieldStateFanState.2
                                  "4.1.1.2.1", #payShieldStatePSUSerialNum.1
                                  "4.1.1.2.2", #payShieldStatePSUSerialNum.2
                                  "4.1.1.3.1", #payShieldStatePSUState.1
                                  "4.1.1.3.2", #payShieldStatePSUState.2
                                  "4.1.1.3.2", #payShieldStateBattery.2
                              ])],
}

